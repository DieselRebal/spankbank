/* GENERATED BY TYPECHAIN VER. 0.2.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from "./typechain-runtime";

export class MultiSigWallet extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "owners",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "isOwner",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }, { name: "", type: "address" }],
        name: "confirmations",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "transactions",
        outputs: [
          { name: "destination", type: "address" },
          { name: "value", type: "uint256" },
          { name: "data", type: "bytes" },
          { name: "executed", type: "bool" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "transactionCount",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "MAX_OWNER_COUNT",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "required",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_owners", type: "address[]" },
          { name: "_required", type: "uint256" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "sender", type: "address" },
          { indexed: true, name: "transactionId", type: "uint256" }
        ],
        name: "Confirmation",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "sender", type: "address" },
          { indexed: true, name: "transactionId", type: "uint256" }
        ],
        name: "Revocation",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "transactionId", type: "uint256" }],
        name: "Submission",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "transactionId", type: "uint256" }],
        name: "Execution",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "transactionId", type: "uint256" }],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "sender", type: "address" },
          { indexed: false, name: "value", type: "uint256" }
        ],
        name: "Deposit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "owner", type: "address" }],
        name: "OwnerAddition",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "owner", type: "address" }],
        name: "OwnerRemoval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: "required", type: "uint256" }],
        name: "RequirementChange",
        type: "event"
      },
      {
        constant: false,
        inputs: [{ name: "owner", type: "address" }],
        name: "addOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "owner", type: "address" }],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "owner", type: "address" },
          { name: "newOwner", type: "address" }
        ],
        name: "replaceOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_required", type: "uint256" }],
        name: "changeRequirement",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "destination", type: "address" },
          { name: "value", type: "uint256" },
          { name: "data", type: "bytes" }
        ],
        name: "submitTransaction",
        outputs: [{ name: "transactionId", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "transactionId", type: "uint256" }],
        name: "confirmTransaction",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "transactionId", type: "uint256" }],
        name: "revokeConfirmation",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "transactionId", type: "uint256" }],
        name: "executeTransaction",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "transactionId", type: "uint256" }],
        name: "isConfirmed",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "transactionId", type: "uint256" }],
        name: "getConfirmationCount",
        outputs: [{ name: "count", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "pending", type: "bool" },
          { name: "executed", type: "bool" }
        ],
        name: "getTransactionCount",
        outputs: [{ name: "count", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "transactionId", type: "uint256" }],
        name: "getConfirmations",
        outputs: [{ name: "_confirmations", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "from", type: "uint256" },
          { name: "to", type: "uint256" },
          { name: "pending", type: "bool" },
          { name: "executed", type: "bool" }
        ],
        name: "getTransactionIds",
        outputs: [{ name: "_transactionIds", type: "uint256[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<MultiSigWallet> {
    const contract = new MultiSigWallet(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get transactionCount(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.transactionCount, []);
  }
  public get MAX_OWNER_COUNT(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.MAX_OWNER_COUNT, []);
  }
  public get required(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.required, []);
  }
  public get getOwners(): Promise<string[]> {
    return promisify(this.rawWeb3Contract.getOwners, []);
  }
  public owners(arg0: BigNumber | number): Promise<string> {
    return promisify(this.rawWeb3Contract.owners, [arg0.toString()]);
  }
  public isOwner(arg0: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isOwner, [arg0.toString()]);
  }
  public confirmations(
    arg0: BigNumber | number,
    arg1: BigNumber | string
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.confirmations, [
      arg0.toString(),
      arg1.toString()
    ]);
  }
  public transactions(
    arg0: BigNumber | number
  ): Promise<[string, BigNumber, string[], boolean]> {
    return promisify(this.rawWeb3Contract.transactions, [arg0.toString()]);
  }
  public isConfirmed(transactionId: BigNumber | number): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isConfirmed, [
      transactionId.toString()
    ]);
  }
  public getConfirmationCount(
    transactionId: BigNumber | number
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getConfirmationCount, [
      transactionId.toString()
    ]);
  }
  public getTransactionCount(
    pending: boolean,
    executed: boolean
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getTransactionCount, [
      pending.toString(),
      executed.toString()
    ]);
  }
  public getConfirmations(
    transactionId: BigNumber | number
  ): Promise<string[]> {
    return promisify(this.rawWeb3Contract.getConfirmations, [
      transactionId.toString()
    ]);
  }
  public getTransactionIds(
    from: BigNumber | number,
    to: BigNumber | number,
    pending: boolean,
    executed: boolean
  ): Promise<BigNumber[]> {
    return promisify(this.rawWeb3Contract.getTransactionIds, [
      from.toString(),
      to.toString(),
      pending.toString(),
      executed.toString()
    ]);
  }

  public addOwnerTx(
    owner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "addOwner", [
      owner.toString()
    ]);
  }
  public removeOwnerTx(
    owner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "removeOwner", [
      owner.toString()
    ]);
  }
  public replaceOwnerTx(
    owner: BigNumber | string,
    newOwner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "replaceOwner", [
      owner.toString(),
      newOwner.toString()
    ]);
  }
  public changeRequirementTx(
    _required: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "changeRequirement",
      [_required.toString()]
    );
  }
  public submitTransactionTx(
    destination: BigNumber | string,
    value: BigNumber | number,
    data: string[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "submitTransaction",
      [
        destination.toString(),
        value.toString(),
        data.map(val => val.toString())
      ]
    );
  }
  public confirmTransactionTx(
    transactionId: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "confirmTransaction",
      [transactionId.toString()]
    );
  }
  public revokeConfirmationTx(
    transactionId: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "revokeConfirmation",
      [transactionId.toString()]
    );
  }
  public executeTransactionTx(
    transactionId: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "executeTransaction",
      [transactionId.toString()]
    );
  }

  public ConfirmationEvent(eventFilter: {
    sender?: BigNumber | string | Array<BigNumber | string>;
    transactionId?: BigNumber | number | Array<BigNumber | number>;
  }): DeferredEventWrapper<
    { sender: BigNumber | string; transactionId: BigNumber | number },
    {
      sender?: BigNumber | string | Array<BigNumber | string>;
      transactionId?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new DeferredEventWrapper<
      { sender: BigNumber | string; transactionId: BigNumber | number },
      {
        sender?: BigNumber | string | Array<BigNumber | string>;
        transactionId?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Confirmation", eventFilter);
  }
  public RevocationEvent(eventFilter: {
    sender?: BigNumber | string | Array<BigNumber | string>;
    transactionId?: BigNumber | number | Array<BigNumber | number>;
  }): DeferredEventWrapper<
    { sender: BigNumber | string; transactionId: BigNumber | number },
    {
      sender?: BigNumber | string | Array<BigNumber | string>;
      transactionId?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new DeferredEventWrapper<
      { sender: BigNumber | string; transactionId: BigNumber | number },
      {
        sender?: BigNumber | string | Array<BigNumber | string>;
        transactionId?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Revocation", eventFilter);
  }
  public SubmissionEvent(eventFilter: {
    transactionId?: BigNumber | number | Array<BigNumber | number>;
  }): DeferredEventWrapper<
    { transactionId: BigNumber | number },
    { transactionId?: BigNumber | number | Array<BigNumber | number> }
  > {
    return new DeferredEventWrapper<
      { transactionId: BigNumber | number },
      { transactionId?: BigNumber | number | Array<BigNumber | number> }
    >(this, "Submission", eventFilter);
  }
  public ExecutionEvent(eventFilter: {
    transactionId?: BigNumber | number | Array<BigNumber | number>;
  }): DeferredEventWrapper<
    { transactionId: BigNumber | number },
    { transactionId?: BigNumber | number | Array<BigNumber | number> }
  > {
    return new DeferredEventWrapper<
      { transactionId: BigNumber | number },
      { transactionId?: BigNumber | number | Array<BigNumber | number> }
    >(this, "Execution", eventFilter);
  }
  public ExecutionFailureEvent(eventFilter: {
    transactionId?: BigNumber | number | Array<BigNumber | number>;
  }): DeferredEventWrapper<
    { transactionId: BigNumber | number },
    { transactionId?: BigNumber | number | Array<BigNumber | number> }
  > {
    return new DeferredEventWrapper<
      { transactionId: BigNumber | number },
      { transactionId?: BigNumber | number | Array<BigNumber | number> }
    >(this, "ExecutionFailure", eventFilter);
  }
  public DepositEvent(eventFilter: {
    sender?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    { sender: BigNumber | string; value: BigNumber | number },
    { sender?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new DeferredEventWrapper<
      { sender: BigNumber | string; value: BigNumber | number },
      { sender?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Deposit", eventFilter);
  }
  public OwnerAdditionEvent(eventFilter: {
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    { owner: BigNumber | string },
    { owner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new DeferredEventWrapper<
      { owner: BigNumber | string },
      { owner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnerAddition", eventFilter);
  }
  public OwnerRemovalEvent(eventFilter: {
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    { owner: BigNumber | string },
    { owner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new DeferredEventWrapper<
      { owner: BigNumber | string },
      { owner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnerRemoval", eventFilter);
  }
  public RequirementChangeEvent(eventFilter: {}): DeferredEventWrapper<
    { required: BigNumber | number },
    {}
  > {
    return new DeferredEventWrapper<{ required: BigNumber | number }, {}>(
      this,
      "RequirementChange",
      eventFilter
    );
  }
}
