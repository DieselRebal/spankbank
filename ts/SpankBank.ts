/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class SpankBank extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "currentPeriod",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "closingVotes",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "bootyToken",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "maxPeriods",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "stakerByDelegateKey",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "stakers",
        outputs: [
          { name: "spankStaked", type: "uint256" },
          { name: "startingPeriod", type: "uint256" },
          { name: "endingPeriod", type: "uint256" },
          { name: "delegateKey", type: "address" },
          { name: "bootyBase", type: "address" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "spankToken",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "isClosed",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "totalSpankStaked",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "periodLength",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "closingPeriod",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "periods",
        outputs: [
          { name: "bootyFees", type: "uint256" },
          { name: "totalSpankPoints", type: "uint256" },
          { name: "bootyMinted", type: "uint256" },
          { name: "mintingComplete", type: "bool" },
          { name: "startTime", type: "uint256" },
          { name: "endTime", type: "uint256" },
          { name: "closingVotes", type: "uint256" },
          { name: "totalStakedSpank", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_periodLength", type: "uint256" },
          { name: "_maxPeriods", type: "uint256" },
          { name: "spankAddress", type: "address" },
          { name: "initialBootySupply", type: "uint256" },
          { name: "bootyTokenName", type: "string" },
          { name: "bootyDecimalUnits", type: "uint8" },
          { name: "bootySymbol", type: "string" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "staker", type: "address" }],
        name: "StakeEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "sender", type: "address" },
          { indexed: true, name: "bootyAmount", type: "uint256" }
        ],
        name: "SendFeesEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "targetBootySupply", type: "uint256" },
          { indexed: true, name: "totalBootySupply", type: "uint256" }
        ],
        name: "MintBootyEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "staker", type: "address" }],
        name: "CheckInEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "period", type: "uint256" },
          { indexed: true, name: "bootyOwed", type: "uint256" }
        ],
        name: "ClaimBootyEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "totalSpankToWithdraw", type: "uint256" }
        ],
        name: "WithdrawStakeEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "newAddress", type: "address" },
          { indexed: false, name: "spankAmount", type: "uint256" }
        ],
        name: "SplitStakeEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "staker", type: "address" }],
        name: "VoteToCloseEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "staker", type: "address" }],
        name: "UpdateDelegateKeyEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "staker", type: "address" }],
        name: "UpdateBootyBaseEvent",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "from", type: "address" },
          { indexed: false, name: "tokenContract", type: "address" },
          { indexed: false, name: "extraData", type: "bytes" }
        ],
        name: "ReceiveApprovalEvent",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "spankAmount", type: "uint256" },
          { name: "stakePeriods", type: "uint256" },
          { name: "delegateKey", type: "address" },
          { name: "bootyBase", type: "address" }
        ],
        name: "stake",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "from", type: "address" },
          { name: "amount", type: "uint256" },
          { name: "tokenContract", type: "address" },
          { name: "extraData", type: "bytes" }
        ],
        name: "receiveApproval",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "bootyAmount", type: "uint256" }],
        name: "sendFees",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "mintBooty",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "updatePeriod",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "updatedEndingPeriod", type: "uint256" }],
        name: "checkIn",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_period", type: "uint256" }],
        name: "claimBooty",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "withdrawStake",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "newAddress", type: "address" },
          { name: "newDelegateKey", type: "address" },
          { name: "newBootyBase", type: "address" },
          { name: "spankAmount", type: "uint256" }
        ],
        name: "splitStake",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "voteToClose",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newDelegateKey", type: "address" }],
        name: "updateDelegateKey",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newBootyBase", type: "address" }],
        name: "updateBootyBase",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "stakerAddress", type: "address" },
          { name: "period", type: "uint256" }
        ],
        name: "getSpankPoints",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "stakerAddress", type: "address" },
          { name: "period", type: "uint256" }
        ],
        name: "getDidClaimBooty",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "stakerAddress", type: "address" },
          { name: "period", type: "uint256" }
        ],
        name: "getVote",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "period", type: "uint256" }],
        name: "getPeriod",
        outputs: [
          { name: "", type: "uint256" },
          { name: "", type: "uint256" },
          { name: "", type: "uint256" },
          { name: "", type: "bool" },
          { name: "", type: "uint256" },
          { name: "", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "stakerAddress", type: "address" }],
        name: "getStaker",
        outputs: [
          { name: "", type: "uint256" },
          { name: "", type: "uint256" },
          { name: "", type: "uint256" },
          { name: "", type: "address" },
          { name: "", type: "address" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "delegateAddress", type: "address" }],
        name: "getStakerFromDelegateKey",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<SpankBank> {
    const contract = new SpankBank(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get currentPeriod(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.currentPeriod, []);
  }

  public get closingVotes(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.closingVotes, []);
  }

  public get bootyToken(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.bootyToken, []);
  }

  public get maxPeriods(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.maxPeriods, []);
  }

  public get spankToken(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.spankToken, []);
  }

  public get isClosed(): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isClosed, []);
  }

  public get totalSpankStaked(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.totalSpankStaked, []);
  }

  public get periodLength(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.periodLength, []);
  }

  public get closingPeriod(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.closingPeriod, []);
  }

  public stakerByDelegateKey(arg0: BigNumber | string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.stakerByDelegateKey, [
      arg0.toString()
    ]);
  }

  public stakers(
    arg0: BigNumber | string
  ): Promise<[BigNumber, BigNumber, BigNumber, string, string]> {
    return TC.promisify(this.rawWeb3Contract.stakers, [arg0.toString()]);
  }

  public periods(
    arg0: BigNumber | number
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  > {
    return TC.promisify(this.rawWeb3Contract.periods, [arg0.toString()]);
  }

  public getSpankPoints(
    stakerAddress: BigNumber | string,
    period: BigNumber | number
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getSpankPoints, [
      stakerAddress.toString(),
      period.toString()
    ]);
  }

  public getDidClaimBooty(
    stakerAddress: BigNumber | string,
    period: BigNumber | number
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.getDidClaimBooty, [
      stakerAddress.toString(),
      period.toString()
    ]);
  }

  public getVote(
    stakerAddress: BigNumber | string,
    period: BigNumber | number
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.getVote, [
      stakerAddress.toString(),
      period.toString()
    ]);
  }

  public getPeriod(
    period: BigNumber | number
  ): Promise<[BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber]> {
    return TC.promisify(this.rawWeb3Contract.getPeriod, [period.toString()]);
  }

  public getStaker(
    stakerAddress: BigNumber | string
  ): Promise<[BigNumber, BigNumber, BigNumber, string, string]> {
    return TC.promisify(this.rawWeb3Contract.getStaker, [
      stakerAddress.toString()
    ]);
  }

  public getStakerFromDelegateKey(
    delegateAddress: BigNumber | string
  ): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getStakerFromDelegateKey, [
      delegateAddress.toString()
    ]);
  }

  public stakeTx(
    spankAmount: BigNumber | number,
    stakePeriods: BigNumber | number,
    delegateKey: BigNumber | string,
    bootyBase: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "stake", [
      spankAmount.toString(),
      stakePeriods.toString(),
      delegateKey.toString(),
      bootyBase.toString()
    ]);
  }
  public receiveApprovalTx(
    from: BigNumber | string,
    amount: BigNumber | number,
    tokenContract: BigNumber | string,
    extraData: string[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "receiveApproval",
      [
        from.toString(),
        amount.toString(),
        tokenContract.toString(),
        extraData.map(val => val.toString())
      ]
    );
  }
  public sendFeesTx(
    bootyAmount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "sendFees", [
      bootyAmount.toString()
    ]);
  }
  public mintBootyTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "mintBooty",
      []
    );
  }
  public updatePeriodTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "updatePeriod",
      []
    );
  }
  public checkInTx(
    updatedEndingPeriod: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "checkIn", [
      updatedEndingPeriod.toString()
    ]);
  }
  public claimBootyTx(
    _period: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "claimBooty", [
      _period.toString()
    ]);
  }
  public withdrawStakeTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "withdrawStake",
      []
    );
  }
  public splitStakeTx(
    newAddress: BigNumber | string,
    newDelegateKey: BigNumber | string,
    newBootyBase: BigNumber | string,
    spankAmount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "splitStake", [
      newAddress.toString(),
      newDelegateKey.toString(),
      newBootyBase.toString(),
      spankAmount.toString()
    ]);
  }
  public voteToCloseTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "voteToClose",
      []
    );
  }
  public updateDelegateKeyTx(
    newDelegateKey: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "updateDelegateKey",
      [newDelegateKey.toString()]
    );
  }
  public updateBootyBaseTx(
    newBootyBase: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "updateBootyBase",
      [newBootyBase.toString()]
    );
  }

  public StakeEventEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { staker: BigNumber | string },
    { staker?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { staker: BigNumber | string },
      { staker?: BigNumber | string | Array<BigNumber | string> }
    >(this, "StakeEvent", eventFilter);
  }
  public SendFeesEventEvent(eventFilter: {
    sender?: BigNumber | string | Array<BigNumber | string>;
    bootyAmount?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { sender: BigNumber | string; bootyAmount: BigNumber | number },
    {
      sender?: BigNumber | string | Array<BigNumber | string>;
      bootyAmount?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { sender: BigNumber | string; bootyAmount: BigNumber | number },
      {
        sender?: BigNumber | string | Array<BigNumber | string>;
        bootyAmount?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "SendFeesEvent", eventFilter);
  }
  public MintBootyEventEvent(eventFilter: {
    targetBootySupply?: BigNumber | number | Array<BigNumber | number>;
    totalBootySupply?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      targetBootySupply: BigNumber | number;
      totalBootySupply: BigNumber | number;
    },
    {
      targetBootySupply?: BigNumber | number | Array<BigNumber | number>;
      totalBootySupply?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        targetBootySupply: BigNumber | number;
        totalBootySupply: BigNumber | number;
      },
      {
        targetBootySupply?: BigNumber | number | Array<BigNumber | number>;
        totalBootySupply?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "MintBootyEvent", eventFilter);
  }
  public CheckInEventEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { staker: BigNumber | string },
    { staker?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { staker: BigNumber | string },
      { staker?: BigNumber | string | Array<BigNumber | string> }
    >(this, "CheckInEvent", eventFilter);
  }
  public ClaimBootyEventEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    period?: BigNumber | number | Array<BigNumber | number>;
    bootyOwed?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      staker: BigNumber | string;
      period: BigNumber | number;
      bootyOwed: BigNumber | number;
    },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      period?: BigNumber | number | Array<BigNumber | number>;
      bootyOwed?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        staker: BigNumber | string;
        period: BigNumber | number;
        bootyOwed: BigNumber | number;
      },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        period?: BigNumber | number | Array<BigNumber | number>;
        bootyOwed?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ClaimBootyEvent", eventFilter);
  }
  public WithdrawStakeEventEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    totalSpankToWithdraw?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { staker: BigNumber | string; totalSpankToWithdraw: BigNumber | number },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      totalSpankToWithdraw?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { staker: BigNumber | string; totalSpankToWithdraw: BigNumber | number },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        totalSpankToWithdraw?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "WithdrawStakeEvent", eventFilter);
  }
  public SplitStakeEventEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    newAddress?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      staker: BigNumber | string;
      newAddress: BigNumber | string;
      spankAmount: BigNumber | number;
    },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      newAddress?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        staker: BigNumber | string;
        newAddress: BigNumber | string;
        spankAmount: BigNumber | number;
      },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        newAddress?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "SplitStakeEvent", eventFilter);
  }
  public VoteToCloseEventEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { staker: BigNumber | string },
    { staker?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { staker: BigNumber | string },
      { staker?: BigNumber | string | Array<BigNumber | string> }
    >(this, "VoteToCloseEvent", eventFilter);
  }
  public UpdateDelegateKeyEventEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { staker: BigNumber | string },
    { staker?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { staker: BigNumber | string },
      { staker?: BigNumber | string | Array<BigNumber | string> }
    >(this, "UpdateDelegateKeyEvent", eventFilter);
  }
  public UpdateBootyBaseEventEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { staker: BigNumber | string },
    { staker?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { staker: BigNumber | string },
      { staker?: BigNumber | string | Array<BigNumber | string> }
    >(this, "UpdateBootyBaseEvent", eventFilter);
  }
  public ReceiveApprovalEventEvent(eventFilter: {}): TC.DeferredEventWrapper<
    {
      from: BigNumber | string;
      tokenContract: BigNumber | string;
      extraData: string[];
    },
    {}
  > {
    return new TC.DeferredEventWrapper<
      {
        from: BigNumber | string;
        tokenContract: BigNumber | string;
        extraData: string[];
      },
      {}
    >(this, "ReceiveApprovalEvent", eventFilter);
  }
}
